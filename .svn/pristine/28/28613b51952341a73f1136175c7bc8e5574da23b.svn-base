package com.zhy.modules.company.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.zhy.common.utils.PageUtils;
import com.zhy.common.utils.Query;

import com.zhy.modules.company.dao.CompanyDao;
import com.zhy.modules.company.entity.CompanyEntity;
import com.zhy.modules.company.service.CompanyService;


@Service("companyService")
public class CompanyServiceImpl extends ServiceImpl<CompanyDao, CompanyEntity> implements CompanyService {
	@Autowired
	private CompanyDao companyDao;

    @Override
    public PageUtils queryPage(Map<String, Object> params) {
        
        Page<CompanyEntity> page = this.selectPage(
                new Query<CompanyEntity>(params).getPage(),
                new EntityWrapper<CompanyEntity>().like("companyname", String.valueOf(params.get("Companyname")))
        );

        return new PageUtils(page);
    }

	/**
	 * 
	 * 根据状态获取到公司的数量和在线状态
	 */
	public Integer CompanyAllSl(String staus) {
		// TODO Auto-generated method stub
		return baseMapper.CompanyAllSl(staus);
	}

	@Override
	public List<Map<String, Object>> CompanyListShowInMap(int comSl, String orderFiled) {
		// TODO Auto-generated method stub
		return baseMapper.CompanyListShowInMap(comSl,orderFiled);
	}

	@Override
	public PageUtils initList(Map<String, Object> params) {
		 Page<CompanyEntity> page = this.selectPage(
	                new Query<CompanyEntity>(params).getPage(),
	                new EntityWrapper<CompanyEntity>()
	        );

	        return new PageUtils(page);
	}

	@Override
	public CompanyEntity selectById(String companyid, Map<String, Object> params) {
		return companyDao.selectById(companyid);
	}

	@Override
	public PageUtils selectList(String companyname, Map<String, Object> params) {
		if("all".equals(companyname)){
			Page<CompanyEntity> page = this.selectPage(
	                new Query<CompanyEntity>(params).getPage()
	        );

	        return new PageUtils(page);
		}else {
			Page<CompanyEntity> page = this.selectPage(
	                new Query<CompanyEntity>(params).getPage(),
	                new EntityWrapper<CompanyEntity>().like("companyname", companyname)
	        );

	        return new PageUtils(page);
		}
		 
	}

	@Override
	public PageUtils selectPages(Map<String, Object> params) {
		Page<CompanyEntity> page = this.selectPage(
                new Query<CompanyEntity>(params).getPage()
        );

        return new PageUtils(page);
	}

	@Override
	public PageUtils queryBynameOrAddress(String value, Map<String, Object> params) {
		Page<CompanyEntity> page = this.selectPage(
                new Query<CompanyEntity>(params).getPage(),
                new EntityWrapper<CompanyEntity>().like("companyname", value).or().like("address",value)
        );

        return new PageUtils(page);
	}


}
